// auto - exec
//------------------
(function() {
  var __bind      = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  var http        = require('http');
  var config      = require('./config.js');
  var head        = require('./header.js');
  var api_request = require('./api_request');
  var puts        = console.log;
  
  puts("Lancement de lemonode");
  if (config.isDebugOn()) {
    puts("Debut chargement de la configuration");
  }
  
  var my_conf = config.getConfigSync();
  
  if (config.isDebugOn()) {
    puts("acquisition de " + my_conf['global']['port']);
  }
  if (config.isDebugOn()) {
    puts("Fin chargement de la configuration");
  }
  if (config.isDebugOn()) {
    puts("Mise en service");
  }
  var my_cookie = my_conf['global']['cookie'];
  
  var loginPortal = my_conf['global']['portal'];
  
  http.createServer(__bind(function(request, response) {
    if (config.isDebugOn()) {
      puts("headers incoming:");
    }
    if (config.isDebugOn()) {
      puts(request.headers);
    }
    if (config.isDebugOn()) {
      puts(request);
    }
    var origine = "http://" + request.headers['host'] + request.url + "_cookie=" + my_cookie;
    if (config.isDebugOn()) {
      puts(request.connection.remoteAddress + ": " + request.method + " (HTTP method) " + request.url + " (url on) " + request.headers['host']);
    }
    var HP = head.getHostPort(request.headers);
    var saveHost = request.headers['host'];
    puts("Cible VIP: " + HP['host'] + " sur port " + HP['port']);
    var config_location = my_conf[HP['host']];
    var targetPort;
    try {
      targetPort = config_location['port'];
    } catch (error) {
      puts("Erreur la location n'existe pas ou est absente de l entete: " + HP['host']);
      return null;
    }
    var targetHost = config_location['hostname'];
    var target = targetHost + ":" + targetPort;
    puts("Cible RIP :" + targetHost + " sur port " + targetPort);
    var my_headers = head.cloneHeaders(request.headers, target);
    if (config.isDebugOn()) {
      puts("headers outcoming:");
    }
    if (config.isDebugOn()) {
      puts(my_headers);
    }
    var my_session = head.getCookie(request.headers, my_cookie);
    my_session = 'rjkgfngkfkj';
    if (my_session) {
      puts("session Ok");
      var apir = new api_request('http', 'localhost', 8888);
      apir.with_content_type('application/json').with_payload({
        'cle': my_session
      }).post('/getValue').on('reply', 
        function(reply, res) {
          // c ici que l'on doit travailler avec la reponse
          //----------------------------------------------------
          var proxy = http.createClient(targetPort, targetHost);
          var proxy_request = proxy.request(request.method, request.url, my_headers);
          
          proxy_request.addListener('response', function(proxy_response) {
            var myHeadersOut;
            proxy_response.addListener('data', __bind(function(chunk) {
              return response.write(chunk, 'binary');
            }, this));
            proxy_response.addListener('end', __bind(function() {
              return response.end();
            }, this));
            puts("passe " + saveHost);
            myHeadersOut = head.cloneHeaders(proxy_response.headers, saveHost);
            puts(myHeadersOut);
            return response.writeHead(proxy_response.statusCode, myHeadersOut);
          });
          
          request.addListener('data', function(chunk) {
            return proxy_request.write(chunk, 'binary');
          });
          
          return request.addListener('end', function() {
            return proxy_request.end();
          });
        
          console.log("eg " + reply);
        }
      );
      puts("ok je suis passe");
    } else {
      puts("session failed cookie");
      var origine64 = new Buffer(origine);
      var locationURL = loginPortal + "?url=" + origine64.toString('base64');
      puts("Location de redirection: " + locationURL);
      var headerRedirection = {
        'location': locationURL
      };
      response.writeHead(302, headerRedirection);
      response.end();
      return null;
    }
  }, this)).listen(my_conf['global']['port']);
 
  puts("le serveur lemonodeJS V0.0 ecoute sur le port " + my_conf['global']['port'] + " ");
  
})();
